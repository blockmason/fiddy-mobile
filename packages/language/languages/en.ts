import { currencySymbols, transferLimits } from 'lndr/currencies'

const generalCommunicationError = 'There was a problem communicating with the server, please try again later.'

const TL = transferLimits

export default {
  applicationName: `Lndr`,
  helloWorld: `Hello world`,
  noConnection: `No connection`,
  retry: `Retry`,
  submit: `SUBMIT`,
  next: `Next`,
  cancel: `Cancel`,
  back: `Go Back`,
  copy: `Copy to Clipboard`,
  confirmAccount: `CONFIRM`,
  createAccount: `CREATE ACCOUNT`,
  recoverAccount: `RESTORE ACCOUNT`,
  removeAccount: `REMOVE ACCOUNT`,
  updateAccount: `UPDATE ACCOUNT`,
  loginAction: `UNLOCK`,
  enterPin: `PLEASE ENTER YOUR PIN`,
  changePin: `CHANGE PIN`,
  enterCurrentPin: `ENTER CURRENT PIN`,
  logoutAction: `LOG OUT`,
  seeAllActivity: `See All Activity`,
  copiedClipboard: `Copied to Clipboard`,
  pleaseWait: `Please Wait`,
  addFriend: `Add Friend`,
  addFriendConfirmationQuestion: `Are you sure you would like to add this user as a friend?`,
  removeFriend: `Remove Friend`,
  currentFriends: `Current Friends`,
  removeFriendConfirmationQuestion: `Are you sure you would like to remove this user as a friend?`,
  inviteFriends: `Invite Friends to Lndr`,
  tryLndr: `Check out the Lndr App here:`,
  friendInfo: `More information about this friendship:`,
  noFriends: `Add some friends to get started!`,
  noMatches: `No matching users found`,
  noBalances: `You have no recorded debts`,
  addFriendButton: `+ ADD FRIEND`,
  alreadyFriendsButton: `FRIENDS`,
  friendShell: `Friend`,
  tip: `Tip:  `,
  notice: `Notice: `,
  welcome: `Welcome to your LNDR`,
  noBalanceWarning: `We were not able to load your balance at this time, please try again later.`,
  totalBalance: `Total Balance`,
  totalBalances: `Total Counterparties:  `,
  myWallet: `My Wallet`,
  tapToChange: `(tap to change)`,
  newTransaction: `New Transaction`,
  needsReview: `Needs Review`,
  owesMe: `I AM OWED`,
  iOwe: `I OWE SOMEONE`,
  newPassword: `New Password (minimum 8 characters)`,
  confirmPassword: `Confirm Password`,
  newPin: `New 4-digit PIN`,
  enterNewPin: `PLEASE SET A NEW 4-DIGIT PIN`,
  confirmPin: `PLEASE CONFIRM YOUR PIN`,
  newAccount: `Create a new account`,
  loginAccount: `Unlock your account`,
  recoverExistingAccount: `Recover an existing account`,
  recoverMnemonic: `Mnemonic (12 words displayed \nwhen you created your account)`,
  recoverMnemonicLengthError: `Mnemonic should be exactly 12 words`,
  successTitle: `Success`,
  errorTitle: `Error`,
  showMnemonic: `Show 12-Word Mnemonic`,
  mnemonicExhortation: `This 12-word phrase is required to restore your account, please keep it somewhere safe and secret`,
  addressExhortation: `You can send ETH or any supported ERC-20 token to your wallet address.`,
  removeAccountTitle: `Are you sure you would like to remove your account from this device?`,
  removeAccountExhortation: `Be sure that you have access to your mnemonic to restore your account later, as this is a permanent removal of your account information from this device.`,
  myAccount: `My Account`,
  setNickname: `Set a nickname so your friends can search for you`,
  setEmail: `Set an email to receive information on Lndr updates`,
  nickname: `Nickname (lowercase & numbers)`,
  email: `Email Address`,
  inviteLink: `Invite Link`,
  sendToAddress: `Send to address`,
  splitExpense: `Split an expense with me on the LNDR app`,
  sendInvite: `Send via email or text`,
  unknownTransaction: `Unknown Transaction`,
  yourFriend: `your friend`,
  lndrVerified: {
    ok: `OK`,
    title: `Set higher settlement limit and crypto withdrawal amounts by completing Know Your Customer requirements.`,
    statusTitle: `The current status of your verification is:`,
    tryAgain: `We were unable to verify your identity. Please resubmit your information and ensure that your photos are legible.`,
    formMessage: `Please fill out all of the following fields`,
    button: `Verify Your Identity`,
    prefix: `Read our `,
    linkTitle: `Privacy Policy`,
    postfix: ` for how your personal data will be managed.`,
    upload: `Upload a `,
    governmentId: `government-issued ID`,
    selfie: `Upload a selfie with your government-issued ID `,
    proofOfAddress: `Proof of address `,
    ifNotId: `(if not ID)`,
    agree: `I have read and agree to the `,
    agreeLink: `Privacy Policy`,
    success: `KYC has been submitted.`,
    idInfoHeader: `Examples of ID include:`,
    passport: `Passport`,
    drivers: `Driver's License`,
    national: `National Identity Card`,
    addressInfoHeader: `Examples of proof of address:`,
    bank: `Bank Statement`,
    utility: `Utility Bill`,
    other: `Other Document`,
    chooseGovernmentPhoto: `Choose Government ID Photo`,
    chooseSelfiePhoto: `Choose Selfie Photo`,
    chooseAddressPhoto: `Choose Proof of Address Photo`,
    emailRequired: `You need an email to verify your identity, please click on "Change Email" below.`,
    approved: `APPROVED`,
    rejected: `REJECTED`,
    pending: `Pending`,
    error: generalCommunicationError,
    formFields: {
      firstName: `First Name`,
      lastName: `Last Name`,
      street: `Street Address`,
      city: `City`,
      state: `State / Province`,
      postalCode: `Zip Code / Postal Code`,
      country: `Select Country`,
      phone: `Phone Number`,
      dob: `Date of Birth (YYYY-MM-DD)`,
    },
    formErrors: {
      firstName: `First Name is required`,
      lastName: `Last Name is required`,
      street: `Street is required`,
      city: `City is required`,
      state: `State / Province is required`,
      postalCode: `Postal Code is required`,
      country: `Country is required`,
      phone: `Phone Number is required`,
      dob: `Date of Birth is required`,
      general: `Please make sure you have filled out all of the fields and attached the correct photos`,
    }
  },
  accountManagement: {
    nickname: {
      lengthViolation: `Nickname should be at least 3 characters.`,
      compositionViolation: `Nickname can contain only numbers and lowercase letters.`,
      duplicationViolation: `Nickname is already taken`,
    },
    email: {
      compositionViolation: `Email format is incorrect`,
      duplicationViolation: `Email is already taken`,
    },
    pin: {
      lengthViolation: `PIN should be at least 4 characters.`,
      matchViolation: `PINs should match.`,
      failedHashComparison: `PIN is not valid, please try again.`,
      updateSuccess: `Your PIN has been updated`,
      updateError: `There was an error updating your PIN`,
    },
    mnemonic: {
      lengthViolation: `Mnemonic should have at least 12 words.`,
      unableToValidate: `The entered mnemonic was not valid, please try again.`,
    },
    setNickname: {
      success: `Your nickname has been saved.`,
      error: generalCommunicationError
    },
    setEmail: {
      success: `Your email has been saved.`,
      error: generalCommunicationError
    },
    lockTimeout: {
      top: `You must enter your PIN after`,
      bottom: `minutes of inactivity`,
      update: `UPDATE`,
      error: `We were unable to update your account settings`,
      success: `Lock Timeout Updated`,
    },
    addFriend: {
      success: nickname => `Friend request sent to @${nickname}`,
      error: generalCommunicationError
    },
    removeFriend: {
      success: nickname => `Removed from friends: @${nickname}`,
      error: generalCommunicationError
    },
    loadInformation: {
      error: generalCommunicationError
    },
    cryptoBalance: {
      display: (name, balance) => `Your ${name} balance is ${String(balance).slice(0,8)}`,
      getError: `Unable to retrieve Eth balance`,
      manage: `Manage ETH`,
    },
    sendEth: {
      error: {
        insufficient: `You do not have enough ETH for this transaction`,
        generic: `There was an error with the transfer, please try again later`,
        address: `Please enter a valid address`,
        amount: `Please enter an amount greater than 0`,
        limitExceeded: (currency, multiplier) => `You can only send ${currencySymbols(currency)}${TL(currency, multiplier)} per week, please select a smaller amount`
      },
      amount: `AMOUNT TO SEND`,
      address: `Destination Address`,
      transfer: `TRANSFER ETH`,
      transferAll: `TRANSFER EVERYTHING`,
      balance: (balance) => `Your current ETH balance is ${typeof balance === 'string' ? balance.slice(0,8) :''}`,
      ethAddress: `Ethereum Address`,
      transferLowercase: `Transfer Eth`,
      note: (currency, multiplier) => `Please note: you can only transfer ${currencySymbols(currency)}${TL(currency, multiplier)} per week out of Lndr`,
      warning: (amount, currency, multiplier) => `You have ${currencySymbols(currency)}${amount} remaining of your ${currencySymbols(currency)}${TL(currency, multiplier)} limit`,
    },
    sendERC20: {
      error: {
        insufficient: (name) => `You do not have enough ${name} for this transaction`,
        generic: `There was an error with the transfer, please try again later`,
      },
      transfer: (name) => `TRANSFER ${name}`,
      address: `Destination Address`,
      balance: (name, balance) => `Your current ${name} balance is ${typeof balance === 'string' ? balance.slice(0,8) :''}`,
      tokenAddress: (name) => `${name} Address`,
      txCost: (ethCost, currencyCost) => `Transaction cost: ${ethCost} ETH (${currencyCost})`,
    },
    panelHeaders: [
      `Wallet Address`,
      `Remove Account`,
      `ETH Transaction History`,
      `Receive PayPal Payments`,
      `Change Primary Currency`,
      `Unlock Additional Features`,
      `Change Email`,
      `Change PIN`,
      `Change Lock Timeout`,
      `Mnemonic`,
      `Notifications`,
    ],
    viewEtherscan: `View Etherscan History`,
    profilePic: {
      change: `Change Profile Picture`,
      setError: `There was an error uploading your picture, please try again later`,
      getError: `There was an error retrieving your profile picture`,
      setSuccess: `Profile picture updated`,
    },
    logoutSuccess: `You have successfully logged out!`,
    logoutError: generalCommunicationError,
    addressWarning: `Manually entering an address should be avoided. Do so at your own risk. We are not responsible for misaddressed or lost transfers.`,
  },

  currentBalance: name => `Current ${name} balance`,

  welcomeView: {
    by: `BUILT BY`,
    makeItEasy: `Lndr makes it easy to track simple debts`,
    weHelpFriends: `We help friends live, work, and play together.`,
    len: `Len`,
    dot: `.`,
    der: `der`,
    shareDinner: `SHARE DINNER`,
    fillTank: `FILL YOUR TANK`,
    travelTogether: `TRAVEL TOGETHER`,
    runEthereum: `WE RUN ON ETHEREUM!`,
    firstLendingApp: `The first mobile lending app secured on the blockchain.`,
    greatConcert: `SEE A GREAT CONCERT`,
    youPlayWithFriends: `You play with friends;\nwe'll keep the tab...`,
    start: `GET STARTED`,
  },
  walkthrough: {
    skip: `skip`,
    continue: `continue`,
    step1: {
      easyToUse: `Lndr is the easiest way to split bills, share expenses and settle simple debts with friends and family, all done securely on the blockchain.`,
      len: `Len`,
      der: `der`,
    },
    step2: {
      getStarted: `To get started with Lndr, you will need to add a friend.`,
      friendsScreen: `Visit the Friends screen to search for, add, or invite your friends and family to connect on Lndr.`,
    },
    step3: {
      title: `Recording a Transaction`,
      easy: `Splitting a bill or adding a debt with a friend is easy in Lndr!`,
      selectFriend: `Select your friend, your currency and the amount.`,
      addMemo: `Add some notes in the memo box and click Submit.`,
    },
    step4: {
      title: `Settling Up`,
      ready: `Ready to Settle Up?`,
      payPal: `When it’s time to settle up with Lndr,\n- you can choose PayPal:`,
      ether: `- cryptocurrencies like Ether:`,
      cash: `- or simply record a cash settlement:`,
      positiveBalance: `10.46`,
    },
    step5: {
      title: `Multi-Currency`,
      multiCurrency: `Lndr can keep track of your transactions even if they happen in different currencies.`,
      exchangeRate: `When you decide to Settle Up with your friend, all transactions will be converted into your primary currency using the most up-to-date exchange rates available.`,
      start: `Start using Lndr!`,
    }
  },
  debtManagement: {
    shell: `New Transaction`,
    add: `Add Debt`,
    selectFriend: `SELECT`,
    lend: `New Loan`,
    borrow: `New Debt`,
    owesMe: `Owes Me`,
    iOwe: `I Owe`,
    iLent: `A friend owes me`,
    iBorrowed: `I owe a friend`,
    settleUpLower: `Settle Up`,
    amountToSettle: `AMOUNT TO SETTLE`,
    total: `Total`,
    record: `record`,
    records: `records`,
    chooseCurrency: `Choose a Currency`,

    createError: {
      amountTooLow: `Amount must be greater than $0`,
      amountTooHigh: `Amount must be less than $1,000,000,000`,
      selfAsFriend: `You can\'t create debt with yourself, choose another friend`,
      pending: `Please resolve your pending transaction with this user before creating another`,
      insufficientEth: eth => `You need at least ${eth} ETH to settle, go to Settings to see your balance`,
    },
    fields: {
      currency: `CURRENCY`,
      amount: `AMOUNT`,
      settlementAmount: `  SETTLEMENT AMOUNT  `,
      selectFriend: `FRIEND`,
      memo: `MEMO`,
      direction: `SELECT THE CORRECT STATEMENT`,
    },
    memo: {
      example: `Type memo here`,
    },
    direction: {
      lend: nickname => `${nickname} owes me`,
      borrow: nickname => `I owe ${nickname}`,
      initiatedLend: nickname => `${nickname} says he/she owes`,
      initiatedBorrow: nickname => `${nickname} says you owe`,
      pendingLend: nickname => `@${nickname} owes you`,
      pendingBorrow: nickname => `You owe @${nickname}`,
      settlement: settlement => `${settlement.settlementCurrency} Settlement`,
      pendingLendSettlement: settlement => `@${settlement.debtorNickname} requests a settlement in ${settlement.settlementCurrency}`,
      pendingBorrowSettlement: settlement => `@${settlement.creditorNickname} wants to settle with you in ${settlement.settlementCurrency}`,
      pendingLendSettlementMe: settlement => `You requested to settle with @${settlement.debtorNickname} in ${settlement.settlementCurrency}`,
      pendingBorrowSettlementMe: settlement => `You requested that @${settlement.creditorNickname} settle in ${settlement.settlementCurrency}`,
    },
    pending: {
      success: friend => `Pending debt submitted to @${friend.nickname}`,
      error: generalCommunicationError
    },
    pendingParens: ` (pending)`,
    confirmation: {
      transaction: counterParty => `Transaction with ${counterParty} has been successfully confirmed`,
      settlement: counterParty => `Settlement with ${counterParty} has been successfully confirmed`,
      error: `Unable to confirm transaction at this time, please try again later`,
    },
    rejection: {
      success: `Transaction has been rejected`,
      error: `Unable to reject transaction at this time, please try again later`,
    },
    balances: {
      error: `Unable to load balances at this time, please try again later`,
    },
    for: memo => `for ${memo}`,
    settleUp: `SETTLE UP`,
    settleTotal: `SETTLE TOTAL`,
    settleUpMemo: (direction, amount) => direction === 'lend' ? `Settling up for ${amount}` :  `Request to settle for ${amount}`,
    recordSettleUpMemo: `settling up`,
    balanceByCurrency: `      Balance by Currency      `,
  },
  settlementManagement: {
    bilateral: {
      error: {
        insufficient: nickname => `Your settlement with ${nickname} failed due to insufficient funds`,
        generic: nickname => `There was an error processing your settlement with ${nickname}`,
      }
    },
    eth: `Settle With ETH`,
    erc20: name => `Settle with ${name}`,
    paypal: `Settle With PayPal`,
    nonPayment: `Record a Settlement`,
    select: `Select Settlement Type`,
  },

  accountViewLanguage: {
    lndr: `L n d r`,
    home: `Home`,
    friends: `Friends`,
    activity: `Activity`,
  },

  notifications: {
    toggleNotifications: `Toggle Notifications`,
    enable: `TURN ON`,
    disable: `TURN OFF`,
  },

  pendingTransactionsLanguage: {
    shell: `Pending Transaction`,
    title: `Pending`,
    memo: `Memo:`,
    for: `For`,
    none: `You have no pending transactions`,
    confirmationQuestion: `Are you sure you want to confirm this transaction?`,
    pendingAnnouncement: `This transaction is waiting for confirmation by the other party.`,
    bilateral: `Waiting on transfer to complete`,
    confirm: `CONFIRM`,
    reject: `Reject Transaction`,
    rejectRequest: `Reject`,
    cancel: `Cancel Transaction`,
    direction: {
      lend: (nickname, amount) => `@${nickname} owes you ${amount}`,
      borrow: (nickname, amount) => `You owe @${nickname} ${amount}`,
    }
  },

  pendingSettlementsLanguage: {
    shell: `Pending Settlement`,
    title: `Pending`,
    none: `You have no pending settlements`,
    confirm: `CONFIRM`,
    reject: `Reject Settlement`,
    cancel: `Cancel Settlement`,
  },

  recentTransactionsLanguage: {
    title: `Completed`,
    none: `You have no completed transactions`,
    direction: {
      lend: (nickname, amount) => `@${nickname} owes you ${amount}`,
      borrow: (nickname, amount) => `You owe @${nickname} ${amount}`
    },
    balance: `Balance `,
    consolidatedBalance: `Consolidated Balance`,
    friends: (friends) => `(from ${friends} ${friends === 1 ? 'friend' :'friends'})`,
  },

  tabs: {
    home: `HOME `,
    friends: `FRIENDS`,
    activity: `ACTIVITY`,
  },

  confirmation: {
    shell: `Confirmation`,
    done: `DONE`,
    create: {
      start: `We've sent the record over to `,
      end: ` for confirmation.`,
    },
    confirm: {
      start: `You've confirmed this record from `,
      end: `.`,
    },
    reject: {
      start: `We've let `,
      end: ` know that you rejected this record.`,
    },
    confirmFriend: {
      start: `You are now friends with `,
      end: `!`,
    },
    rejectFriend: {
      start: `You have declined the friend request from `,
      end: `.`,
    },
    rejectOutboundFriendRequest: {
      start: `You have cancelled the friend request to `,
      end: `.`,
    },
    ethSent: {
      start: `You have successfully sent `,
      end: ` ETH and your transaction hash is `,
    },
    erc20Sent: {
      start: `You have successfully sent `,
      end: ` and your transaction hash is `,
    },
    requestPayPalPayee: {
      start: `We've let `,
      end: ` know that you would like to settle with PayPal.`,
    },
    requestPayPalPayment: {
      start: `We've let `,
      end: ` know that you'd like to be paid with PayPal.`,
    },
    settledWithPayPal: {
      start: `We've let `,
      end: ` know that you've settled with PayPal.`,
    },
    kycSuccess: {
      start: `Thank you! Your account is being verified.

      `,
      end: `You will be notified when your additional features are unlocked.`
    },
    status: `You can see the status of this transaction in the `,
    activity: `activity tab.`,
  },

  pendingFriendRequestsLanguage: {
    shell: `Friend Request`,
    message: `Friend Requests`,
    request: friend => `@${friend} wants to be friends with you!`,
    outbound: friend => `You sent a friend request to @${friend}`,
  },

  privacyPolicy: {
    link: `blockmason.io/lndr/terms/`,
    message: `By clicking below you confirm that you have read and agree to Blockmason's privacy policy. Blockmason may use your email address to send updates about Blockmason and LNDR. Here is a link to the privacy policy:`,
  },

  payPalLanguage: {
    connectPayPal: `Connect PayPal`,
    connectSuccess: `PayPal enabled successfully.`,
    disconnectPayPal: `Disconnect PayPal`,
    disconnected: `PayPal disconnected.`,
    requestPayPalPayment: `Request PayPal Payment`,
    sendWithPayPal: `Send With PayPal`,
    enablePayPal: `Enable PayPal`,
    requestPayPalPayee: `Request PayPal`,
    enablePayPalForFriend: F => `Enabling PayPal allows @${F} to pay you.`,
    friendNotEnabled: F => `@${F} has not enabled PayPal payments.`,
    friendRequestedConnect: F => `@${F} wants to pay you via PayPal`,
    requestFriendConnect: F => `You asked @${F} to enable PayPal`,
    feesNotification: `Does not include PayPal fees`,
    feesInformationHeader: `PayPal Fees Information`,
    feesInformation: `1. Your PayPal account must be tied to a bank account.

2. Paying in a currency different from your bank's currency will incur a $0.35 fee.

3. International transfer fees:
    U.S. to Canada/Europe: $2.99
    U.S. to anywhere else: $4.99

4. These fees are not comprehensive. For the most updated information please go to:

    https://www.paypal.com/us/webapps/mpp/paypal-fees#sending-us`,
    payPalSite: `PayPal.com`,
  },

  countries: [
    { name: `Afghanistan`, code: 'AFG' },
    { name: `Albania`, code: 'ALB' },
    { name: `Algeria`, code: 'DZA' },
    { name: `Andorra`, code: 'AND' },
    { name: `Angola`, code: 'AGO' },
    { name: `Anguilla`, code: 'AIA' },
    { name: `Antarctica`, code: 'ATA' },
    { name: `Antigua and Barbuda`, code: 'ATG' },
    { name: `Argentina`, code: 'ARG' },
    { name: `Armenia`, code: 'ARM' },
    { name: `Aruba`, code: 'ABW' },
    { name: `Australia`, code: 'AUS' },
    { name: `Austria`, code: 'AUT' },
    { name: `Azerbaijan`, code: 'AZE' },
    { name: `Bahamas`, code: 'BHS' },
    { name: `Bahrain`, code: 'BHR' },
    { name: `Bangladesh`, code: 'BGD' },
    { name: `Barbados`, code: 'BRB' },
    { name: `Belarus`, code: 'BLR' },
    { name: `Belgium`, code: 'BEL' },
    { name: `Belize`, code: 'BLZ' },
    { name: `Benin`, code: 'BEN' },
    { name: `Bermuda`, code: 'BMU' },
    { name: `Bhutan`, code: 'BTN' },
    { name: `Bolivia`, code: 'BOL' },
    { name: `Bosnia and Herzegovina`, code: 'BIH' },
    { name: `Botswana`, code: 'BWA' },
    { name: `Brazil`, code: 'BRA' },
    { name: `Brunei`, code: 'BRN' },
    { name: `Bulgaria`, code: 'BGR' },
    { name: `Burkina Faso`, code: 'BFA' },
    { name: `Burundi`, code: 'BDI' },
    { name: `Cabo Verde`, code: 'CPV' },
    { name: `Cambodia`, code: 'KHM' },
    { name: `Cameroon`, code: 'CMR' },
    { name: `Canada`, code: 'CAN' },
    { name: `Cayman Islands`, code: 'CYM' },
    { name: `Central African Republic`, code: 'CAF' },
    { name: `Chad`, code: 'TCD' },
    { name: `Chile`, code: 'CHL' },
    { name: `China`, code: 'CHN' },
    { name: `Colombia`, code: 'COL' },
    { name: `Comoros`, code: 'COM' },
    { name: `Congo`, code: 'COG' },
    { name: `Congo`, code: 'COD' },
    { name: `Cook Islands`, code: 'COK' },
    { name: `Costa Rica`, code: 'CRI' },
    { name: `Côte d'Ivoire`, code: 'CIV' },
    { name: `Croatia`, code: 'HRV' },
    { name: `Cuba`, code: 'CUB' },
    { name: `Curaçao`, code: 'CUW' },
    { name: `Cyprus`, code: 'CYP' },
    { name: `Czechia`, code: 'CZE' },
    { name: `Denmark`, code: 'DNK' },
    { name: `Djibouti`, code: 'DJI' },
    { name: `Dominica`, code: 'DMA' },
    { name: `Dominican Republic`, code: 'DOM' },
    { name: `Ecuador`, code: 'ECU' },
    { name: `Egypt`, code: 'EGY' },
    { name: `El Salvador`, code: 'SLV' },
    { name: `Equatorial Guinea`, code: 'GNQ' },
    { name: `Eritrea`, code: 'ERI' },
    { name: `Estonia`, code: 'EST' },
    { name: `Eswatini`, code: 'SWZ' },
    { name: `Ethiopia`, code: 'ETH' },
    { name: `Fiji`, code: 'FJI' },
    { name: `Finland`, code: 'FIN' },
    { name: `France`, code: 'FRA' },
    { name: `French Guiana`, code: 'GUF' },
    { name: `French Polynesia`, code: 'PYF' },
    { name: `Gabon`, code: 'GAB' },
    { name: `Gambia`, code: 'GMB' },
    { name: `Georgia`, code: 'GEO' },
    { name: `Germany`, code: 'DEU' },
    { name: `Ghana`, code: 'GHA' },
    { name: `Gibraltar`, code: 'GIB' },
    { name: `Greece`, code: 'GRC' },
    { name: `Greenland`, code: 'GRL' },
    { name: `Grenada`, code: 'GRD' },
    { name: `Guadeloupe`, code: 'GLP' },
    { name: `Guam`, code: 'GUM' },
    { name: `Guatemala`, code: 'GTM' },
    { name: `Guinea`, code: 'GIN' },
    { name: `Guinea-Bissau`, code: 'GNB' },
    { name: `Guyana`, code: 'GUY' },
    { name: `Haiti`, code: 'HTI' },
    { name: `Vatican`, code: 'VAT' },
    { name: `Honduras`, code: 'HND' },
    { name: `Hong Kong`, code: 'HKG' },
    { name: `Hungary`, code: 'HUN' },
    { name: `Iceland`, code: 'ISL' },
    { name: `India`, code: 'IND' },
    { name: `Indonesia`, code: 'IDN' },
    { name: `Iran`, code: 'IRN' },
    { name: `Iraq`, code: 'IRQ' },
    { name: `Ireland`, code: 'IRL' },
    { name: `Isle of Man`, code: 'IMN' },
    { name: `Israel`, code: 'ISR' },
    { name: `Italy`, code: 'ITA' },
    { name: `Jamaica`, code: 'JAM' },
    { name: `Japan`, code: 'JPN' },
    { name: `Jordan`, code: 'JOR' },
    { name: `Kazakhstan`, code: 'KAZ' },
    { name: `Kenya`, code: 'KEN' },
    { name: `Kiribati`, code: 'KIR' },
    { name: `Korea (DPRK)`, code: 'PRK' },
    { name: `Korea (ROK)`, code: 'KOR' },
    { name: `Kuwait`, code: 'KWT' },
    { name: `Kyrgyzstan`, code: 'KGZ' },
    { name: `Laos`, code: 'LAO' },
    { name: `Latvia`, code: 'LVA' },
    { name: `Lebanon`, code: 'LBN' },
    { name: `Lesotho`, code: 'LSO' },
    { name: `Liberia`, code: 'LBR' },
    { name: `Libya`, code: 'LBY' },
    { name: `Liechtenstein`, code: 'LIE' },
    { name: `Lithuania`, code: 'LTU' },
    { name: `Luxembourg`, code: 'LUX' },
    { name: `Macao`, code: 'MAC' },
    { name: `Macedonia`, code: 'MKD' },
    { name: `Madagascar`, code: 'MDG' },
    { name: `Malawi`, code: 'MWI' },
    { name: `Malaysia`, code: 'MYS' },
    { name: `Maldives`, code: 'MDV' },
    { name: `Mali`, code: 'MLI' },
    { name: `Malta`, code: 'MLT' },
    { name: `Marshall Islands`, code: 'MHL' },
    { name: `Martinique`, code: 'MTQ' },
    { name: `Mauritania`, code: 'MRT' },
    { name: `Mauritius`, code: 'MUS' },
    { name: `Mexico`, code: 'MEX' },
    { name: `Micronesia`, code: 'FSM' },
    { name: `Moldova`, code: 'MDA' },
    { name: `Monaco`, code: 'MCO' },
    { name: `Mongolia`, code: 'MNG' },
    { name: `Montenegro`, code: 'MNE' },
    { name: `Montserrat`, code: 'MSR' },
    { name: `Morocco`, code: 'MAR' },
    { name: `Mozambique`, code: 'MOZ' },
    { name: `Myanmar`, code: 'MMR' },
    { name: `Namibia`, code: 'NAM' },
    { name: `Nauru`, code: 'NRU' },
    { name: `Nepal`, code: 'NPL' },
    { name: `Netherlands`, code: 'NLD' },
    { name: `New Caledonia`, code: 'NCL' },
    { name: `New Zealand`, code: 'NZL' },
    { name: `Nicaragua`, code: 'NIC' },
    { name: `Niger`, code: 'NER' },
    { name: `Nigeria`, code: 'NGA' },
    { name: `Niue`, code: 'NIU' },
    { name: `Northern Mariana Islands`, code: 'MNP' },
    { name: `Norway`, code: 'NOR' },
    { name: `Oman`, code: 'OMN' },
    { name: `Pakistan`, code: 'PAK' },
    { name: `Palau`, code: 'PLW' },
    { name: `Palestine`, code: 'PSE' },
    { name: `Panama`, code: 'PAN' },
    { name: `Papua New Guinea`, code: 'PNG' },
    { name: `Paraguay`, code: 'PRY' },
    { name: `Peru`, code: 'PER' },
    { name: `Philippines`, code: 'PHL' },
    { name: `Pitcairn`, code: 'PCN' },
    { name: `Poland`, code: 'POL' },
    { name: `Portugal`, code: 'PRT' },
    { name: `Puerto Rico`, code: 'PRI' },
    { name: `Qatar`, code: 'QAT' },
    { name: `Réunion`, code: 'REU' },
    { name: `Romania`, code: 'ROU' },
    { name: `Russian Federation`, code: 'RUS' },
    { name: `Rwanda`, code: 'RWA' },
    { name: `Saint Barthélemy`, code: 'BLM' },
    { name: `Saint Helena, Ascension and Tristan da Cunha`, code: 'SHN' },
    { name: `Saint Kitts and Nevis`, code: 'KNA' },
    { name: `Saint Lucia`, code: 'LCA' },
    { name: `Saint Martin`, code: 'MAF' },
    { name: `Saint Pierre and Miquelon`, code: 'SPM' },
    { name: `Saint Vincent and the Grenadines`, code: 'VCT' },
    { name: `Samoa`, code: 'WSM' },
    { name: `San Marino`, code: 'SMR' },
    { name: `Sao Tome and Principe`, code: 'STP' },
    { name: `Saudi Arabia`, code: 'SAU' },
    { name: `Senegal`, code: 'SEN' },
    { name: `Serbia`, code: 'SRB' },
    { name: `Seychelles`, code: 'SYC' },
    { name: `Sierra Leone`, code: 'SLE' },
    { name: `Singapore`, code: 'SGP' },
    { name: `Sint Maarten`, code: 'SXM' },
    { name: `Slovakia`, code: 'SVK' },
    { name: `Slovenia`, code: 'SVN' },
    { name: `Solomon Islands`, code: 'SLB' },
    { name: `Somalia`, code: 'SOM' },
    { name: `South Africa`, code: 'ZAF' },
    { name: `South Sudan`, code: 'SSD' },
    { name: `Spain`, code: 'ESP' },
    { name: `Sri Lanka`, code: 'LKA' },
    { name: `Sudan`, code: 'SDN' },
    { name: `Suriname`, code: 'SUR' },
    { name: `Sweden`, code: 'SWE' },
    { name: `Switzerland`, code: 'CHE' },
    { name: `Syrian Arab Republic`, code: 'SYR' },
    { name: `Taiwan`, code: 'TWN' },
    { name: `Tajikistan`, code: 'TJK' },
    { name: `Tanzania`, code: 'TZA' },
    { name: `Thailand`, code: 'THA' },
    { name: `Timor-Leste`, code: 'TLS' },
    { name: `Togo`, code: 'TGO' },
    { name: `Tokelau`, code: 'TKL' },
    { name: `Tonga`, code: 'TON' },
    { name: `Trinidad and Tobago`, code: 'TTO' },
    { name: `Tunisia`, code: 'TUN' },
    { name: `Turkey`, code: 'TUR' },
    { name: `Turkmenistan`, code: 'TKM' },
    { name: `Turks and Caicos Islands`, code: 'TCA' },
    { name: `Tuvalu`, code: 'TUV' },
    { name: `Uganda`, code: 'UGA' },
    { name: `Ukraine`, code: 'UKR' },
    { name: `United Arab Emirates`, code: 'ARE' },
    { name: `United Kingdom`, code: 'GBR' },
    { name: `United States of America`, code: 'USA' },
    { name: `United States Minor Outlying Islands`, code: 'UMI' },
    { name: `Uruguay`, code: 'URY' },
    { name: `Uzbekistan`, code: 'UZB' },
    { name: `Vanuatu`, code: 'VUT' },
    { name: `Venezuela`, code: 'VEN' },
    { name: `Viet Nam`, code: 'VNM' },
    { name: `British Virgin Islands`, code: 'VGB' },
    { name: `US Virgin Islands`, code: 'VIR' },
    { name: `Western Sahara`, code: 'ESH' },
    { name: `Yemen`, code: 'YEM' },
    { name: `Zambia`, code: 'ZMB' },
    { name: `Zimbabwe`, code: 'ZWE' },
  ]
}
